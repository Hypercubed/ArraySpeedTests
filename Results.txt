# filter
for loop x 2.02 ops/sec ±3.54% (9 runs sampled)
array.filter x 1.08 ops/sec ±3.62% (7 runs sampled)
Array.prototype.filter on PowerArray x 1.02 ops/sec ±5.02% (7 runs sampled)
powerArray.filter x 0.33 ops/sec ±1.42% (5 runs sampled)
fast.filter on Array x 1.55 ops/sec ±2.39% (8 runs sampled)
fast.filter on PowerArray x 1.54 ops/sec ±5.11% (8 runs sampled)
underscore.filter on Array x 1.41 ops/sec ±6.07% (8 runs sampled)
lodash.filter on Array x 1.63 ops/sec ±2.08% (9 runs sampled)
Fastest is for loop

# forEach
for loop x 73.02 ops/sec ±0.82% (82 runs sampled)
array.forEach x 2.42 ops/sec ±2.09% (11 runs sampled)
Array.prototype.forEach on array x 2.43 ops/sec ±1.98% (11 runs sampled)
Array.prototype.forEach on Uint16Array x 2.56 ops/sec ±1.96% (11 runs sampled)
Array.prototype.forEach on PowerArray x 2.32 ops/sec ±2.03% (10 runs sampled)
powerArray.forEach x 9.51 ops/sec ±1.62% (29 runs sampled)
PowerArray.prototype.forEach on Uint16Array x 9.18 ops/sec ±1.55% (28 runs sampled)
fast.forEach on Array x 10.25 ops/sec ±1.73% (31 runs sampled)
fast.forEach on Uint16Array x 10.14 ops/sec ±1.77% (30 runs sampled)
fast.forEach on PowerArray x 7.63 ops/sec ±1.65% (24 runs sampled)
underscore.forEach on Array x 10.40 ops/sec ±0.92% (31 runs sampled)
underscore.forEach on Uint16Array x 9.22 ops/sec ±1.42% (29 runs sampled)
lodash.forEach on Array x 9.06 ops/sec ±1.73% (28 runs sampled)
lodash.forEach on Uint16Array x 9.12 ops/sec ±1.70% (28 runs sampled)
Fastest is for loop

# reduce Sum
for loop x 64,047 ops/sec ±1.00% (97 runs sampled)
array.reduce x 2,536 ops/sec ±0.83% (97 runs sampled)
Array.prototype.reduce on array x 2,455 ops/sec ±1.00% (95 runs sampled)
Array.prototype.reduce on Uint16Array x 2,565 ops/sec ±0.91% (96 runs sampled)
Array.prototype.reduce on PowerArray x 2,427 ops/sec ±0.88% (99 runs sampled)
powerArray.forEach x 7,389 ops/sec ±0.83% (97 runs sampled)
PowerArray.prototype.forEach on Uint16Array x 7,172 ops/sec ±0.96% (96 runs sampled)
fast.reduce on Array x 9,541 ops/sec ±0.96% (96 runs sampled)
fast.reduce on Uint16Array x 8,629 ops/sec ±0.83% (99 runs sampled)
fast.reduce on PowerArray x 8,265 ops/sec ±0.93% (94 runs sampled)
underscore.reduce on Array x 5,183 ops/sec ±0.98% (96 runs sampled)
underscore.reduce on Uint16Array x 5,108 ops/sec ±0.89% (97 runs sampled)
lodash.reduce on Array x 5,764 ops/sec ±0.85% (96 runs sampled)
lodash.reduce on Uint16Array x 5,706 ops/sec ±0.92% (97 runs sampled)
Fastest is for loop
